[core]
no_lock = True
;logging_conf_file = logging.conf
;default_scheduler_port = 25565

[scheduler]
retry_count = 1
disable_window_seconds = 3600

[worker]
keep_alive = False
ping_interval = 20
wait_interval = 20
max_reschedules = 0

[DEFAULT]
name = MC_Test

; grid storage protocol and path usable from submitting machine and worker nodes of cluster
; job in- and output will be stored in $wlcg_path under subdirectory of analysis $name
;wlcg_path = davs://cmswebdav-kit-disk.gridka.de:2880/pnfs/gridka.de/cms/disk-only/store/user/mhorzela/HerwigMC
;wlcg_path = srm://cmssrm-kit.gridka.de:8443/srm/managerv2?SFN=/pnfs/gridka.de/cms/disk-only/store/user/mhorzela/HerwigMC
;wlcg_path = srm://grid-srm.physik.rwth-aachen.de:8443/srm/managerv2?SFN=/pnfs/physik.rwth-aachen.de/cms/store/user/mhorzela/HerwigMC
wlcg_path = root://cmsdcache-kit-disk.gridka.de:1094//store/user/mhorzela/HerwigMC

; default htcondor job submission configuration (modifiable for each task)
htcondor_accounting_group = cms.jet
htcondor_remote_job = True
; TODO: Set your user proxy to your personal one 
htcondor_user_proxy = /home/mhorzela/.globus/x509up_u12249
htcondor_request_cpus = 1
; for all cores in total
htcondor_universe = docker
htcondor_docker_image = mschnepf/slc7-condocker
; create log files in htcondor jobs
transfer_logs = True
; set local scheduler
local_scheduler = True
; set tolerance for workflow success with failed branches
tolerance = 0.00
acceptance = 1.00
; submit only missing htcondor workflow branches (should always be true)
only_missing = True

; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_lawherwig.sh

; general Herwig parameters
; Herwig input file and settings
; the name of the input file in the inputfiles directory w/o file extension
input_file_name = LHC-LO-Z2JetMerging
; currently only for grid storage path
mc_setting = test




[HerwigBuild]
; directory name to search for Herwig steering file
config_path = default


[HerwigIntegrate]
; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_lawherwig.sh
; number of integration jobs
integration_maxjobs = 30
;HTCondor
htcondor_walltime = 3600
htcondor_request_memory = 2500
htcondor_requirements = TARGET.ProvidesCPU && (TARGET.Machine =!= "sg01.etp.kit.edu") && (TARGET.Machine =!= "sg03.etp.kit.edu") && (TARGET.Machine =!= "sg04.etp.kit.edu")
htcondor_request_disk = 2000000


[HerwigMerge]


[HerwigRun]
; Herwig setupfile for additional confgurations
; setupfile = None
; run specific settings
number_of_jobs = 4000
events_per_job = 10000
; start seed for random seed generation, per default turned off
start_seed = 100
; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_lawherwig.sh
; HTCondor
htcondor_walltime = 10800
htcondor_request_memory = 2500
htcondor_requirements = TARGET.ProvidesCPU && (TARGET.Machine =!= "sg01.etp.kit.edu") && (TARGET.Machine =!= "sg03.etp.kit.edu") && (TARGET.Machine =!= "sg04.etp.kit.edu")
htcondor_request_disk = 40000000


[SherpaConfig]
config_path = default

[SherpaSetup]

[SherpaIntegrate]

[SherpaRun]
; Herwig setupfile for additional confgurations
; setupfile = None
; run specific settings
number_of_jobs = 400
events_per_job = 1000000
; start seed for random seed generation, per default turned off
start_seed = 100
; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_lawsherpa.sh
; HTCondor
htcondor_walltime = 3600
htcondor_request_memory = 500
htcondor_requirements = TARGET.ProvidesCPU && (TARGET.Machine =!= "sg01.etp.kit.edu") && (TARGET.Machine =!= "sg03.etp.kit.edu") && (TARGET.Machine =!= "sg04.etp.kit.edu")
htcondor_request_disk = 5000000


[RunRivet]
; number of analyzed files per job = number_of_jobs/rivet_jobs
files_per_job = 10
; analyses to run on generated HepMC files
; make sure that you have your plugin analyses in ./generation/analyses included
rivet_analyses = ["ZplusJet_3","MC_XS","MC_WEIGHTS"]
; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_lawrivet.sh
; HTCondor
htcondor_walltime = 3600
htcondor_request_memory = 2500
htcondor_requirements = TARGET.ProvidesIO && (TARGET.Machine =!= "sg01.etp.kit.edu") && (TARGET.Machine =!= "sg03.etp.kit.edu") && (TARGET.Machine =!= "sg04.etp.kit.edu")
htcondor_request_disk = 40000000


[RivetMerge]
; number of files per rivetmerge chunk
chunk_size = 300


[DeriveNPCorr]


[PlotNPCorr]
splittings_conf_all = zjet
;splittings_conf_all = dijets
fits = {"ZplusJet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "ZplusJet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
;fits = {"Dijet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "Dijet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "Dijet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_10_15_YS_05_10.json":"YB_10_15_YS_05_10", "Dijet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
match = ["ZplusJet"]
;match = ["Dijet_"]
unmatch = ["MC_","\\[*\\]"]
;unmatch = [DIJETCHI,"\\[*\\]"]
filter_label_pad_tuples=[["ZPt","RAW","p_T^Z\\,/\\,\\mathrm{GeV}", "NP corr."]]
;filter_label_pad_tuples=[["PtAve","RAW","<p_T>_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."],["Mass","RAW","m_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."]]


[PlotNPCorrSummary]
splittings_conf_summary = {"YS0":"YS0", "YB0":"YB0", "YSYBAll":"zjet"}
fits = {"ZplusJet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "ZplusJet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
;fits = {"Dijet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "Dijet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "Dijet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_10_15_YS_05_10.json":"YB_10_15_YS_05_10", "Dijet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
match = ["ZplusJet"]
;match = ["Dijet_"]
unmatch = ["MC_","\\[*\\]"]
;unmatch = [DIJETCHI,"\\[*\\]"]
filter_label_pad_tuples=[["ZPt","RAW","p_T^Z\\,/\\,\\mathrm{GeV}", "NP corr."]]
;filter_label_pad_tuples=[["PtAve","RAW","<p_T>_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."],["Mass","RAW","m_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."]]


[PlotScenarioComparison]
campaigns = ["LHC-LO-ZplusJet","LHC-NLO-ZplusJet"]
;campaigns = ["Dijets_LO","Dijets_NLO"]
;rivet_analyses = ["Dijet_3"]
fits = {"ZplusJet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "ZplusJet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "ZplusJet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "ZplusJet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "ZplusJet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "ZplusJet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "ZplusJet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "ZplusJet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "ZplusJet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "ZplusJet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "ZplusJet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "ZplusJet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "ZplusJet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "ZplusJet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "ZplusJet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
;fits = {"Dijet_3_AK4YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK8YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK8YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK8YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK4YB_15_20_YS_00_05.json": "YB_15_20_YS_00_05", "Dijet_3_AK4YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10", "Dijet_3_AK8YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK8YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK8YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_15_20.json": "YB_00_05_YS_15_20", "Dijet_3_AK4YB_05_10_YS_15_20.json": "YB_05_10_YS_15_20", "Dijet_3_AK4YB_15_20_YS_05_10.json": "YB_15_20_YS_05_10", "Dijet_3_AK8YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_20_25_YS_00_05.json": "YB_20_25_YS_00_05", "Dijet_3_AK4YB_10_15_YS_05_10.json": "YB_10_15_YS_05_10", "Dijet_3_AK8YB_05_10_YS_10_15.json": "YB_05_10_YS_10_15", "Dijet_3_AK8YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK4YB_00_05_YS_00_05.json": "YB_00_05_YS_00_05", "Dijet_3_AK4YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_10_15_YS_05_10.json":"YB_10_15_YS_05_10", "Dijet_3_AK4YB_00_05_YS_05_10.json": "YB_00_05_YS_05_10", "Dijet_3_AK8YB_05_10_YS_00_05.json": "YB_05_10_YS_00_05", "Dijet_3_AK4YB_10_15_YS_10_15.json": "YB_10_15_YS_10_15", "Dijet_3_AK4YB_00_05_YS_10_15.json": "YB_00_05_YS_10_15", "Dijet_3_AK4YB_10_15_YS_00_05.json": "YB_10_15_YS_00_05", "Dijet_3_AK8YB_00_05_YS_20_25.json": "YB_00_05_YS_20_25", "Dijet_3_AK8YB_05_10_YS_05_10.json": "YB_05_10_YS_05_10"}
mc_setting_full = withNP
mc_setting_partial = NPoff
match = ["ZplusJet"]
;match = ["Dijet_"]
unmatch = ["MC_","\\[*\\]"]
;unmatch = ["DIJETCHI","\\[*\\]"]
filter_label_pad_tuples=[["ZPt","RAW","p_T^Z\\,/\\,\\mathrm{GeV}", "NP corr."]]
;filter_label_pad_tuples=[["PtAve","RAW","<p_T>_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."],["Mass","RAW","m_{1,2}\\,/\\,\\mathrm{GeV}", "NP corr."]]
splittings_conf = {"YB0": "YB0", "YS0": "YS0", "YSYBAll": "zjet"}
;splittings_conf = {"YB0": "YB0_dijets", "YS0": "YS0_dijets", "YSYBAll": "dijets"}
